Contents
I. How to use Team Portrait Tool
II. How to use General UI Tool
III. How to use Plug-ins Tool

Animated UI Maker for WWMI
Welcome to the tutorial for the Animated UI Maker. This tool allows you to create custom animated UI for Wuthering Waves. Depending on the type of animation you want to implement, follow the respective sections below:

I. How to use Team Portrait Tool
If you want to use an image or video for your team portraits, follow these steps:

1. Go to the `Team Portrait Tool` group module.
2. Click the `Video Editor` module, then click the "+" button to add a container.
3. You can add up to 3 containers in the display area. These simulate what it would look like for your team composition. To remove a container, click the "x" on the top-left of the container.
4. To add an image/video, click the image with red borders. These borders indicate which parts will be hidden by the game.
5. Edit the image/video using the various textboxes and sliders. There is also a toggle to reverse the video, and a save button to save your work to the project's `media` folder.
6. After saving, go to the `INI File Maker` module to create the `.ini` file that will animate your team portrait. Click the "+" to add a container.
7. Fill in the required information, including the character name and hashes. The character name textbox has suggestions that auto-fill the hash input for convenience. 
8. Click the `Create INI File` button to generate the frame folders and `.ini` file, then find the `Mod` folder of WWMI to place your new portrait mod.
9. You're done! Your custom animated portrait should now work with WWMI.

II. How to use General UI Tool
If you want to mod other UI elements, follow these steps:

1. Open the `General UI Tool` group module.
2. Click the `Video Processing` module and click the "+" to add a container. 
3. Fill in the necessary fields as shown in the module container. You will need to:
    - Select the image/video you want to replace the game element.
    - Optional: Apply roundness or transparency of the image/video.
    - Set the target FPS (higher FPS results in more frames but can slow down the game if set too high).
    - Set the segment length to split the video into parts for faster processing.
    - Select a template: This will be the UI element you want to replace and can be used as a comparison to what will the element will look like after applying the image/video.
	- `Recent`: Will display all the templates you've recently used
	- `Search DDS`: Find the Frame dumps/ Frame analysis folder when you've hunted the hashes in WWMI.
	- `Browse File`: Find any other image that can be used for your template. 
    - The Preview will show you what the mod will look like when applied.
4. Click `Start Processing` once you've filled out the fields.
5. Now, optimize the frames to ensure smooth animation. This involves scaling down the frames and converting them to DDS format.
6. In the `Frame Optimizing Tool`, choose `Combined Mode` for all-in-one processing. 
7. Select the frames folder in the dropdown, then choose the scale, how many batches of frames you want to process simultaneously, and set your GPU ID (you can find this in the Task Manager under the Performance tab) and click Convert to DDS.
8. Click `Start Processing` to proceed.
9. Next, go to the `INI File Maker v2` module to create the `.ini` file for the mod.
10. Select the frames folder and preview the animation. If the frames appear darker, that's normalâ€”these will return to their correct appearance in the game.
11. Enter the character's hash value. You can click on the name textbox to auto-fill the hash.
12. Click `Process and Create Mod` to finish. The mod is now ready to be placed wherever you need it.

III. How to use Plug-ins Tool
This section is for developers who want to add custom plugins to the tool.

A. HTML Plugins
1. Create a folder with a `main.html` file inside it.
2. To import an HTML plugin, click the Import button and select the folder containing the `main.html` file.

B. PyQt5 Plugins
1. Create a folder with a `main.py` file inside it. The main class must be a `QWidget` for it to work.
```
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel

class Main(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('Main GUI')
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        label = QLabel('This is the main GUI')
        self.layout.addWidget(label)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Main()
    ex.show()
    sys.exit(app.exec_())
```
2. Click the Import button and select the folder containing `main.py`.

C. Plugin Maker AI
1. Install Ollama and choose a coding model to use (e.g., `qwen2.5-coder`).
2. Ask the AI to generate the plugin code with the appropriate features, such as including CSS and JS for HTML plugins or using `PyQt5` for Python plugins.
3. Edit the generated code and export it as a plugin folder.